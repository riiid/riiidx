@startuml DX Architecture
' How to write this file? -> https://github.com/plantuml-stdlib/C4-PlantUML
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!define DEV2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!define FA5 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEV2/google.puml
!include DEV2/kotlin.puml
!include DEV2/swift.puml
!include DEV2/vscode.puml
!include FA5/chrome.puml
!include FA5/github.puml
!include FA5/npm.puml
!include FA5/users.puml
!include ./icons/deno.puml
!include ./icons/pbkit.puml

title DX Architecture

Person(riiid_developer, "Engineers", "Software Engineers at Riiid", $sprite="users")
Rel(riiid_developer, riiidx, "Uses")
Rel(riiid_developer, pbkit, "Uses")

SystemDb_Ext(_github, "GitHub", $sprite="github")

System_Boundary(riiidx, "Riiidx") {
  Container(riiidx_language_pack, "Language Pack", "Deno Script", "A script that updates the translation resource in the repository.", $sprite="deno")
  ComponentDb_Ext(riiidx_language_pack_google_sheets, "Google Sheets", $sprite="google")
  Rel_Right(riiidx_language_pack, riiidx_language_pack_google_sheets, "Reads")
}

System_Boundary(pbkit, "Pbkit") {
  Container(pb, "pb", "CLI", "Protobuf schema compiler", $sprite="pbkit")
  Container(pollapo, "pollapo", "CLI", "Protobuf schema package mananger", $sprite="pbkit")
  Container(pbkit_dev, "pbkit.dev", "Website", "Pbkit project homepage")
  Container(pbkit_devtools, "pbkit-devtools", "Chrome Extension", "Chrome extension compatible with pbkit web client", $sprite="chrome")
  Container(vscode_pbkit, "vscode-pbkit", "VSCode Extension", "VSCode plugin for Protobuf. Syntax highlight, goto definition", $sprite="vscode")
}

Container_Boundary(pbkit_pb, "pb") {
  Rel(pb, pbkit_pb, "Zoom in")
  Rel_Up(pollapo, _github, "Reads")
  Component(pb_parser, "Parser", "Module")
  Component(pb_builder, "Schema Builder", "Module")
  Component(pb_gen_ts, "Typescript target", "Code Generator")
  Component(pb_gen_swift, "Swift target", "Code Generator")
  Component_Ext(protobuf_schema_files, "`.proto` files", "Code", "Protobuf schema files")
  Component_Ext(pb_schema, "Schema", "Data")
  Component_Ext(pb_ast, "AST", "Data")
  Component_Ext(pb_gen_ts_result, "`pb gen ts` result", "Code", "Typescript library code generated by `pb gen ts` command")
  Component_Ext(pb_gen_swift_result, "`pb gen swift` result", "Code", "Swift library code generated by `pb gen swift` command")
  Rel(pollapo, protobuf_schema_files, "Writes")
  Rel_Up(pb_builder, protobuf_schema_files, "Reads")
  Rel(pb_builder, pb_parser, "Uses")
  Rel(pb_builder, pb_schema, "Generates")
  Rel(pb_schema, pb_ast, "Contains")
  Rel(pb_parser, pb_ast, "Generates")
  Rel(pb_gen_ts, pb_schema, "Uses")
  Rel(pb_gen_ts, pb_gen_ts_result, "Generates")
  Rel(pb_gen_swift, pb_schema, "Uses")
  Rel(pb_gen_swift, pb_gen_swift_result, "Generates")
  Rel(pb_gen_ts_result, pbkit_npm_packages, "Uses")
}

Container_Boundary(wrp, "WRP") {
  Component(wrp_protocol, "WRP", "Protocol", "Webview/Worker Request Protocol")
  Component(wrp_ts, "wrp-ts", "Deno Library", $sprite="deno")
  Component(wrp_swift, "wrp-swift", "Swift Library", $sprite="swift")
  Component(wrp_kt, "wrp-kt", "Kotlin Library", $sprite="kotlin")
  Rel(wrp_ts, wrp_protocol, "Implements")
  Rel(wrp_swift, wrp_protocol, "Implements")
  Rel(wrp_kt, wrp_protocol, "Implements")
  Rel(pb_gen_swift_result, wrp_swift, "Uses")
}

Container_Boundary(pbkit_npm_packages, "NPM Packages") {
  Component(grpc_client, "grpc-client", "NPM Package", $sprite="npm")
  Component(grpc_web_client, "grpc-web-client", "NPM Package", $sprite="npm")
  Component(frpc_client, "frpc-client", "NPM Package", $sprite="npm")
  Component(frpc_server, "frpc-server", "NPM Package", $sprite="npm")
}

SHOW_LEGEND()

@enduml
